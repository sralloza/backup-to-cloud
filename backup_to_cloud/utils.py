"""Useful functions for the backup_to_cloud package."""

import mimetypes
import pickle
import re
from datetime import datetime
from os import walk
from pathlib import Path
from typing import Any, List, Union

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import Resource, build

from .exceptions import TokenError
from .paths import CREDENTIALS_PATH, LOG_PATH, TOKEN_PATH

SCOPES = ["https://www.googleapis.com/auth/drive"]
ZIP_MIMETYPE = "application/octet-stream"
_EXTRA_MIME_TYPES = (
    ("application/arj", ".arj"),
    ("application/cab", ".cab"),
    ("application/vnd.ms-excel", ".xla"),
    ("application/toml", ".toml"),
    ("application/vnd.ms-powerpoint", ".pot"),
    ("application/x-msaccess", ".mdb"),
    ("application/x-python-code", ".pyc"),
    ("application/x-rar-compressed", ".rar"),
    ("application/x-sh", ".sh"),
    ("application/x-sqlite3", ".db"),
    ("application/x-sqlite3", ".sqlite"),
    ("application/x-yaml", ".yaml"),
    ("application/x-yaml", ".yml"),
    ("application/xml", ".xml"),
    ("application/zip", ".zip"),
    ("image/x-ms-bmp", ".bmp"),
    ("text/csv", ".csv"),
    ("text/x-php", ".php"),
    ("text/x-python", ".py"),
)

Logable = Union[str, Exception]


def log(template: Logable, *args: Any):
    """Logs a message to the LOG_FILE.

    Args:
        template (Logable): template to form the log message.
        *args (Any): arguments to form the log message.
    """

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    time_str = f"[{now}] "
    if isinstance(template, BaseException):
        message = "ERROR: " + repr(template)
    else:
        message = template % args
    with LOG_PATH.open("at", encoding="utf-8") as file_handler:
        file_handler.write(time_str + message + "\n")


def gen_new_token():
    """Generates a new token."""

    if not CREDENTIALS_PATH.exists():
        raise FileNotFoundError(CREDENTIALS_PATH.as_posix())

    flow = InstalledAppFlow.from_client_secrets_file(
        CREDENTIALS_PATH.as_posix(), SCOPES
    )
    creds = flow.run_local_server(port=0)

    TOKEN_PATH.write_bytes(pickle.dumps(creds))


def get_google_drive_services(creds: Credentials = None) -> Resource:
    """Returns an object to operate with the Google Drive API v3.

    Args:
        creds (Credentials, optional): credentials to use. If None, it
            will be generated by get_creds_from_token(). Defaults to None.

    Returns:
        Resource: Google Drive API v3 operator.
    """

    if not creds:
        creds = get_creds_from_token()

    return build("drive", "v3", credentials=creds)


def get_creds_from_token() -> Credentials:
    """Returns the credentials for the Google Drive API v3.

    Raises:
        exc: if the token path doesn't exist.
        exc: if the token path is not valid.

    Returns:
        Credentials: credentials for google drive.
    """

    if not TOKEN_PATH.exists():
        exc = TokenError(f"{TOKEN_PATH.as_posix()!r} doesn't exist")
        log(exc)
        raise exc

    creds = pickle.loads(TOKEN_PATH.read_bytes())

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
            log("Token updated (expires %s)", creds.expiry)
            TOKEN_PATH.write_bytes(pickle.dumps(creds))
        else:
            exc = TokenError(f"Invalid token: {TOKEN_PATH.as_posix()!r}")
            log(exc)
            raise exc

    return creds


def get_mimetype(filepath: str) -> str:
    """Returns the mimetype of the `filepath` based on its extension.

    Args:
        filepath (str): input filepath.

    Returns:
        str: mimetype of `filepath`.
    """

    mime_type = mimetypes.guess_type(filepath)[0]
    reason = "database"

    if not mime_type:
        path = Path(filepath)
        if not path.is_file():
            reason = "file not found"
            mime_type = "application/octet-stream"
        else:
            try:
                path.read_bytes().decode()
                mime_type = "text/plain"
                reason = "plain content"
            except UnicodeDecodeError:
                mime_type = "application/octet-stream"
                reason = "unknown content"

    log("Mimetype of %r is %r [%s]", filepath, mime_type, reason)
    return mime_type


def _improve_mimetypes():
    """Adds extra MIME types."""

    for mime_type, extension in _EXTRA_MIME_TYPES:
        mimetypes.add_type(mime_type, extension, strict=True)


def list_files(root_dir: str, regex_filter: str) -> List[str]:
    """Recursively find all files within root_dir that match regex_filter.

    Args:
        root_dir (str): root dir to search files.
        regex_filter (str): regex to filter files.

    Returns:
        List[str]: files that match regex_filter within root_dir.
    """

    path = Path(root_dir).absolute()
    pattern = re.compile(regex_filter, re.IGNORECASE)
    files = []

    for root, _, temp_files in walk(path.as_posix()):
        for file in temp_files:
            filepath = Path(root).joinpath(file)
            if pattern.search(filepath.as_posix()):
                files.append(filepath)

    return files


_improve_mimetypes()
